/**
 * Title:      Consultant Tool
 * 
 * Author:     Michael Gell (Student 30276096)
 * 
 * Date:       11 May 2012
 * 
 * File Name:  Application.java
 * 
 * Purpose:    This class generates all GUI elements based upon the data model.
 * 
 *             All GUI elements are nested within the Top Level JFrame member of this class.
 * 
 * 
 * 
 * Assumptions / Conditions
 * 
 *      Form of Input:
 * 
 *      This class contains all event handling code. These handlers receive events
 * 
 *      generated by the user clicking on GUI components, etc. Often this will cause
 * 
 *      a change in the data model.
 * 
 * 
 *      Expected Output:
 * 
 *      The TabWithGroupLayout class relies upon the Application class to provide
 * 
 *      it with NameValuePair objects, which are used to generate the user interface.
 * 
 *      When changes happen to the data model, these NameValuePair objects are
 * 
 *      regenerated and sent for display.
 */

package consultanttool3;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.event.*;
import java.io.File;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.ListIterator;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;




public class Application
{
    
    /**
     * Object contains the application data.
     */
    private Model m_model = null;
    
    /**
     * JFrame containing all other GUI elements.
     */
    private JFrame m_topLevelJFrame;
    
    /**
     * The Tabbed Pane.
     */
    private JTabbedPane m_tabbedPane;
    
    /**
     * True if we are in editing mode.
     */
    private boolean m_editable = true;
    
    /**
     * Projects Tab
     */
    private TabWithGroupLayout m_projectTab;
    
    /**
     * Consultants Tab
     */
    private TabWithGroupLayout m_consultantTab;
    
    /**
     * The project that is currently selected in the project tab list panel. May be null.
     */
    private Project m_currentlySelectedProject;
    
    /**
     * The consultant that is currently selected in the consultant tab list panel. May be null.
     */
    private Consultant m_currentlySelectedConsultant;
    
    /**
     * Most recently selected JList index in the Project Tab's List Panel.  -1 if none selected.
     */
    private int m_recentIndex_projectListPanel = -1;
    
    /**
     * Most recently selected JList index in the Consultant Tab's List Panel.  -1 if none selected.
     */
    private int m_recentIndex_consultantListPanel = -1;
    
    /**
     * The name of the currently selected ListPanel item.  May be a Project name or a Consultant name.
     */
    private String m_nameOfCurrentlySelectedListPanelItem;
    
    /**
     * String value to identify the project ListPanel, in event handler code.
     */
    private String m_projectListPanelId = "ProjectListPanel";
    
    /**
     * String value to identify the consultant ListPanel, in event handler code.
     */
    private String m_consultantListPanelId = "ConsultantListPanel";
    
    
    /**
     * Menu item - new data file.
     */
    private JMenuItem m_menuItemNewDataFile;
    
    /**
     * Menu item - save data file.
     */
    private JMenuItem m_menuItemSaveDataFile;
    
    
    /**
     * Project Name - input field
     */
    private JTextField m_projectShortNameInput;
    
    /**
     * Checkbox to set if the project is finished.
     */
    private ProjectCheckBox m_projFinCheckBox;
    
    
    
    
    
    
    
    /**
     * Consultant Name - input field
     */
    private JTextField m_consultantNameInput;
    
    /**
     * Consultant Address - street name input field
     */
    private JTextField m_streetNameInput;
    
    /**
     * Consultant Address - street number input field
     */
    private JTextField m_streetNumberInput;
        
    /**
     * Consultant Address - suburb input field
     */    
    private JTextField m_suburbInput;
         
    /**
     * Consultant Address - postcode input field
     */   
    private JTextField m_postCodeInput;
    
    /**
     * Consultant Gender - input field.
     */
    private ConsultantComboBox m_genderComboBox;
    
    /**
     * Consultant type - input field. Sets the "contract" that the consultant is employed by.
     */
    private ConsultantComboBox m_consultantTypeComboBox;
    
    
    
    
    
    /**
     * Consultant annual salary - LABEL for input field. Hidden if the consultant type doesn't need it.
     */
    private JLabel     m_AnnualSalaryTitle = new JLabel();
    
    /**
     * Consultant annual salary - input field. Hidden if the consultant type doesn't need it.
     */
    private JTextField m_AnnualSalaryInput = new JTextField();

    
    /**
     * Consultant hourly rate - LABEL for input field. Hidden if the consultant type doesn't need it.
     */
    private JLabel     m_HourlyRateTitle = new JLabel();
    
    /**
     * Consultant hourly rate - input field. Hidden if the consultant type doesn't need it.
     */
    private JTextField m_HourlyRateInput = new JTextField();

    
    /**
     * Consultant max allowed hours - LABEL for input field. Hidden if the consultant type doesn't need it.
     */
    private JLabel     m_MaxAllowedHoursTitle = new JLabel();
    
    /**
     * Consultant max allowed hours - input field. Hidden if the consultant type doesn't need it.
     */
    private JTextField m_MaxAllowedHoursInput = new JTextField();
    
                    

    
    
    
    
    
    
    
    
    
    /**
     * Get a Picture representing the default Consultant image.
     * 
     * @return Picture object.
     */
    public static Picture getDefaultConsultantPicture()
    {
        File f = new File(""); // get the current directory.

        String absCurrentDirPath = f.getAbsolutePath(); // get absolute path of the current directory.

        //absCurrentDirPath = absCurrentDirPath + "\\owls\\owlWithBigEyes.jpg";
        
        absCurrentDirPath = absCurrentDirPath + "\\owls\\default_portrait3.jpg";

        GregorianCalendar dateTaken = (GregorianCalendar)GregorianCalendar.getInstance(); // today, now.
        
        dateTaken.set(
                
            1985,
            
            GregorianCalendar.DECEMBER,
            
            17,
            
            0, 0, 0
        );
        
        Picture pic = new Picture(absCurrentDirPath, dateTaken);
        
        return pic;
    }
    
    
    
    
    
    
    /**
     * Get the maximum height / maximum width that is allowed for images.
     * 
     * Images that are too big will be smooth scaled down.
     * 
     * @return int value.
     */
    public static int getMaxImageSpan()
    {
        return 343;
    }
    
    
    
    
    
    
    
    /**
     * Constructor with argument
     * 
     * @param generateTestData boolean - true if we want to start the system with a bunch of bogus items in the model. 
     */
    public Application(boolean generateTestData)
    {
        this();
     
        if (generateTestData)
        {
            m_model.generateTestData(); // makes a bunch of projects and consultants.

            repaintGui();
        }
    }
    
    
    
    
    
    
    
    
    /**
     * Default Constructor.
     */
    public Application()
    {
        
        m_nameOfCurrentlySelectedListPanelItem = null; // nothing is selected.
        
        // Create the model and view.
        
        m_model = new Model();
        
        try
        {
            
            
            // The top level JFrame contains ALL OTHER GUI elements.
            
            m_topLevelJFrame = new JFrame("Consultant Tool");



            // MENU BAR

            JMenuBar m_menuBar = new JMenuBar();

            MenuActionHandler menuActionHandler = new MenuActionHandler();

            
            
            // FILE MENU

            JMenu m_menuFile = new JMenu("File");

            m_menuItemNewDataFile = new JMenuItem("New");
            
            JMenuItem m_menuItemOpenDataFile = new JMenuItem("Open (existing) Data File");

            m_menuItemSaveDataFile = new JMenuItem("Save (current) Data File");

            JMenuItem m_menuItemExitApplication = new JMenuItem("Exit application");

            m_menuItemNewDataFile.addActionListener(menuActionHandler);

            m_menuItemOpenDataFile.addActionListener(menuActionHandler);

            m_menuItemSaveDataFile.addActionListener(menuActionHandler);

            m_menuItemExitApplication.addActionListener(menuActionHandler);

            m_menuFile.add(m_menuItemNewDataFile);

            m_menuFile.add(m_menuItemOpenDataFile);

            m_menuFile.add(m_menuItemSaveDataFile);

            m_menuFile.add(m_menuItemExitApplication);


            // OPTIONS MENU

            JMenu m_menuOptions = new JMenu("Options");

            ButtonGroup radioButtongroup = new ButtonGroup();

            JMenuItem m_radioButtonEditingMode = new JRadioButtonMenuItem("Editing Mode");

            JMenuItem m_radioButtonViewingMode = new JRadioButtonMenuItem("Viewing Mode");

            m_radioButtonEditingMode.addActionListener(menuActionHandler);

            m_radioButtonViewingMode.addActionListener(menuActionHandler);

            radioButtongroup.add(m_radioButtonEditingMode);

            radioButtongroup.add(m_radioButtonViewingMode);

            m_menuOptions.add(m_radioButtonEditingMode);

            m_menuOptions.add(m_radioButtonViewingMode);

            m_radioButtonEditingMode.setSelected(true);
            

            // ATTACH MENUS TO MENU BAR

            m_menuBar.add(m_menuFile);

            m_menuBar.add(m_menuOptions);
            

            // ATTACH MENU BAR TO THE TOPLEVELJFRAME

            m_topLevelJFrame.add(m_menuBar, BorderLayout.NORTH);

            m_topLevelJFrame.addWindowListener(new WindowCloseListener());

            
            
            
            
            
            
            // TABBED PANE (contains Projects Tab and Consultants Tab)
            
            m_tabbedPane = new JTabbedPane();
            
            m_topLevelJFrame.add(m_tabbedPane, BorderLayout.CENTER);
            
            ActionListener m_listPanelHandlerAdd = new ListPanelHandlerAddButton();
            
            ActionListener m_listPanelHandlerRemove = new ListPanelHandlerRemoveButton();
            
            
            
            
            // PROJECTS TAB
            
            m_projectTab = new TabWithGroupLayout(m_projectListPanelId);
            
            m_projectTab.setListPanelTitle("Current Projects:");
            
            m_projectTab.setDetailsPanelTitle("Project Details:");
            
            m_projectTab.setAddButtonHandler(m_listPanelHandlerAdd);
            
            m_projectTab.setRemoveButtonHandler(m_listPanelHandlerRemove);
            
            m_projectTab.setListPanelHandler(new ListPanelSelectionHandler());
            
            // The list of Projects will hold string values (names) rather than the actual object.
            
            // This means that the object stays inside the model.
            
            ArrayList<String> projectNames = m_model.getProjectNames();
            
            m_projectTab.setListNames(projectNames);
           
            m_tabbedPane.addTab("Projects", m_projectTab);
            
            
            
            
            
            
            // CONSULTANTS TAB
            
            m_consultantTab = new TabWithGroupLayout(m_consultantListPanelId);
            
            m_consultantTab.setListPanelTitle("Consultants List:");
            
            m_consultantTab.setDetailsPanelTitle("Consultant Details:");
            
            m_consultantTab.setAddButtonHandler(m_listPanelHandlerAdd);
            
            m_consultantTab.setRemoveButtonHandler(m_listPanelHandlerRemove);
            
            m_consultantTab.setListPanelHandler(new ListPanelSelectionHandler());
            
            // The list of Consultants will hold string values (names) rather than the actual object.
            
            // This means that the object stays inside the model.
            
            ArrayList<String> consultantNames = m_model.getConsultantNames();
            
            m_consultantTab.setListNames(consultantNames);
            
            m_tabbedPane.addTab("Consultants", m_consultantTab);
            
            
            
            
            
            // Finished constructing tabs. Add listener to tabbedPane
            
            m_tabbedPane.addChangeListener(new TabChangeListener());
            
            
            
            
            
            
            
            
            // DEBUG BUTTON - prints data to console when we click it.
            
            JButton debugButton = new JButton("printDebugInfo");
            
            debugButton.addActionListener(
                    
                new ActionListener()
                {
                    public void actionPerformed(ActionEvent e)
                    {
                        printDebugInfo();
                    }
                }
            );
            
            debugButton = null; // Make it null if you don't want to display it.
            
            if (debugButton != null)
            {
                m_topLevelJFrame.add(debugButton, BorderLayout.SOUTH);
            }
            
            
            
            
            
            
            
            
            // Launch the GUI
            
            
            m_topLevelJFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            
            m_topLevelJFrame.setSize(850, 700);
            
            m_topLevelJFrame.setVisible(true);
            
            // GUI is running.
            
        }
        catch(ClassCastException classCastException)
        {
            System.err.println("Unable to cast Listener. " + classCastException.getMessage());
        }
        catch(ControlException controlException)
        {
            System.err.println("ControlException: " + controlException.getMessage());
        }
        
        repaintGui();
    }
    
    
    
    
    
    
    
    
    
    /**
     * Quit the application.
     */
    private void quitApplication()
    {
        System.exit(0);
    }
    
    
    
    
    
    
    
    /**
     * Add an invisible vertical spacer element to the given nvp content array.
     * 
     * @param content ArrayList<NameValuePair>
     */
    private void addSpacer(ArrayList<NameValuePair> content)
    {
        NameValuePair nvpSpacer = new NameValuePair(
        
            new JLabel(""),

            new JLabel("")
        );
        
        nvpSpacer.set_NameHeight_IsFixed(true);
        
        nvpSpacer.set_ValueHeight_IsFixed(true);
                
        content.add(nvpSpacer);
    }
    
    
    
    
    
    /**
     * Given a project, generate its name-value-pair GUI elements, for display in the details panel.
     * 
     * Each NameValuePair object is typically a JLabel and JTextField.
     * 
     * @param p Project - object for which to generate DetailsPanel gui elements. May be null. If null, we return immediately.
     * 
     * @return ArrayList<NameValuePair> array of paired GUI elements. Or null if nothing was generated.
     */
    public ArrayList<NameValuePair> generateProjectDetailNVP(Project p) throws ControlException
    {
        if (p == null)
        {
            return null;
        }
        
        
        
        
        
        
        
        // Generate pairs.
        
        ArrayList<NameValuePair> content = new ArrayList<NameValuePair>();
        
        NameValuePair nvp;
        
        // Need to display this data in the DetailsPanel:
        
        //    Project ID
        
        //    Project Name
        
        //    Consultant for this project
        
        //    Client Name
        
        //    Cost Charged
        
        //    Description of the Project.
        
        //    Starting Date
        
        //    Proposed Finishing Date
        
        //    Checkbox - Project is Finished
        
        //    Actual Finishing Date - may be hidden.
        
        
        
        
        
        // PROJECT ID
        
        nvp = new NameValuePair(
        
            new JLabel("Project ID:"),

            new JLabel(Integer.toString(p.getProjectID())) // Never editable.
        );
        
        content.add(nvp);
        
        
        
        
        
        
        // PROJECT NAME
        
        if (m_editable)
        {
            m_projectShortNameInput = new JTextField(p.getProjectShortName());

            // m_projectShortNameInput.setColumns(27);

            m_projectShortNameInput.setColumns(31);

            ProjectNameChangeHandler nameChangeHandler = new ProjectNameChangeHandler();

            nameChangeHandler.setMyProject(p);  // Tell the handler what object to manipulate.

            m_projectShortNameInput.getDocument().addDocumentListener(nameChangeHandler);
            
            nvp = new NameValuePair(
        
                new JLabel("Name:"),

                m_projectShortNameInput
            );
        }
        else
        {
            nvp = new NameValuePair(
        
                new JLabel("Name:"),

                new JLabel(p.getProjectShortName())
            );
        }
        
        nvp.set_ValueHeight_IsFixed(true);
        
        content.add(nvp);
        
        
        
        
        
        
        
        // CONSULTANT FOR THIS PROJECT (Using COMBO BOX)
        
        if (m_editable)
        {
            ArrayList<String> allCNames = m_model.getConsultantNames(); // Get the names of all consultants in the model.

            boolean modelHasConsultants = !allCNames.isEmpty();

            allCNames.add(0, "(none)");

            String[] stringArray = new String[allCNames.size()]; stringArray = allCNames.toArray(stringArray); // Convert allCNames to String[]

            Object[] objArr = stringArray; 

            JComboBox comboBox = new JComboBox(objArr);

            ConsultantForThisProjectActionListener comboHandler = new ConsultantForThisProjectActionListener();

            comboBox.addActionListener(comboHandler);

            int comboBoxIndex = 0;

            Consultant consultantToFind = p.getConsultant();

            if (consultantToFind == null)
            {
                // Project does not have a consultant.
            }
            else
            {
                // Project has a consultant. We must figure out what index to select in the combo box.

                if(modelHasConsultants)
                {
                    // Find the correct index for us to select in the combo box.

                    /**
                    *   If the consultants in the model are stored sequentially,
                    * 
                    *    __________________________________________
                    *   |   model_index   |    consultant_object   |
                    *   |_________________|________________________|
                    *   |                 |                        |
                    *   |          0      |    consultant_21       |
                    *   |          1      |    consultant_23       |
                    *   |          2      |    consultant_40       |
                    *   |          3      |    consultant_89       |
                    *   |          4      |    consultant_92       |
                    *   |          5      |    consultant_94       |
                    *   |_________________|________________________|
                    * 
                    * 
                    * 
                    *   ...and we call m_model.getConsultantIndex(consultant_40)
                    * 
                    *      Then with the above example it returns (int) 2
                    * 
                    */

                    comboBoxIndex = m_model.getConsultantIndex(consultantToFind); // returns -1 if not found.

                    if (comboBoxIndex >= 0)
                    {
                        // found index

                        ++comboBoxIndex; // increment, because we added "(none)" to the list.

                        /*
                        *    __________________________________________
                        *   | COMBO_BOX_index |    displayed string    |
                        *   |_________________|________________________|
                        *   |                 |                        |
                        *   |          0      |   "(none)"             |
                        *   |          1      |   "consultant_21"      |
                        *   |          2      |   "consultant_23"      |
                        *   |          3      |   "consultant_40"      |
                        *   |          4      |   "consultant_89"      |
                        *   |          5      |   "consultant_92"      |
                        *   |          6      |   "consultant_94"      |
                        *   |_________________|________________________|
                        * 
                        */

                    }
                    else
                    {
                        // could not find index.

                        System.err.println("Problem has occurred. cNames: " + allCNames);

                        throw new ControlException("Problem with combo box index...   m_model.getProjectListSelectionIndex() returned null.");
                    }
                }
            }

            comboBox.setSelectedIndex(comboBoxIndex);

            JLabel consultantForProjComboxLabel = new JLabel("Consultant for this project:");

            nvp = new NameValuePair(

                consultantForProjComboxLabel,

                comboBox  // new JTextField(getConsultant().getName())
            );

            nvp.setValueDimensions(

                new Dimension( 343,  20 ),

                new Dimension( 343,  20 ),

                new Dimension( 343,  20 )
            );

            nvp.set_ValueHeight_IsFixed(true);

            nvp.set_ValueWidth_IsFixed(true);

            content.add(nvp);
        }
        else
        {
            // Not editable
            
            Consultant con = p.getConsultant();
            
            String conName = "(none)";
            
            if (con != null)
            {
                conName = con.getName();
            }
            else
            {
                
            }
            nvp = new NameValuePair(

                new JLabel("Consultant for this project:"),

                new JLabel(conName)
            );
            
            content.add(nvp);
        }
        addSpacer(content);
        
        
        
        
        
        
        
        
        
        
        
        // CLIENT NAME
        
        if (m_editable)
        {
            JTextField clientNameInput = new JTextField(p.getClientName());
        
            clientNameInput.setColumns(31);

    //        JComponent comp = (JComponent)clientNameInput; // upcast
    //        
    //        comp.setName(m_ClientNameFieldId);             // set component name
    //        
    //        clientNameInput = (JTextField)comp;            // downcast

            ClientNameChangeHandler clientNameChangeHandler = new ClientNameChangeHandler();

            clientNameChangeHandler.setMyProject(p);  // Tell the handler what object to manipulate.

            clientNameInput.getDocument().addDocumentListener(clientNameChangeHandler);

            JLabel theLabel = new JLabel("Name of our client:");

            nvp = new NameValuePair(

                theLabel,

                clientNameInput
            );
        }
        else
        {
            nvp = new NameValuePair(

                new JLabel("Name of our client:"),

                new JLabel(p.getClientName())
            );
        }
        
        nvp.set_ValueHeight_IsFixed(true);
        
        content.add(nvp);
        
        
        
        
        
        
        
        
        
        // COST CHARGED
        
        if (m_editable)
        {
            JTextField costChargedField = new JTextField(Integer.toString(p.getCostCharged()));

            costChargedField.setColumns(31);

            ProjectCostChangeHandler costHandler = new ProjectCostChangeHandler();

            costHandler.setMyProject(p);  // Tell the handler what object to manipulate.

            costChargedField.getDocument().addDocumentListener(costHandler);

            JLabel theLabel = new JLabel("Our charge ($ per hour):");

            nvp = new NameValuePair(

                theLabel,

                costChargedField
            );
        }
        else
        {
            nvp = new NameValuePair(

                new JLabel("Our charge ($ per hour):"),

                new JLabel(Integer.toString(p.getCostCharged()))
            );
        }
        
        nvp.set_ValueHeight_IsFixed(true);
        
        content.add(nvp);
        
        addSpacer(content);
        
        
        
        
        
        
        
        // PROJECT DESCRIPTION
        
        JTextArea projectDescription = new JTextArea(p.getDescription());

        projectDescription.setLineWrap(true);

        ProjectDescriptionUpdateHandler docTextChangeHandler = new ProjectDescriptionUpdateHandler();

        docTextChangeHandler.setMyProject(p); // tell the handler what object to manipulate.

        if (m_editable)
        {
            projectDescription.getDocument().addDocumentListener(docTextChangeHandler);
        }
        
        projectDescription.setEditable(m_editable);
        
        JScrollPane descriptionScroller = new JScrollPane(

            projectDescription,

            JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,

            JScrollPane.HORIZONTAL_SCROLLBAR_NEVER
        );

        JLabel theLabel = new JLabel("Project Description:");

        nvp = new NameValuePair(

            theLabel,

            descriptionScroller
        );

        nvp.applySizeConstrait(projectDescription);
        
        nvp.setValueDimensions(
                
            new Dimension( 343,  50 ),

            new Dimension( 343,  100 ),
            
            new Dimension( 343,  50 )
        );
        
        nvp.set_ValueWidth_IsFixed(true);
        
        nvp.set_ValueHeight_IsFixed(false);
        
        content.add(nvp);
        
        addSpacer(content);
        
        
        
        
        
        
        
        // STARTING DATE
        
        if (m_editable)
        {
            DateInput dateInput;

            dateInput = new ProjectDateInput(

                p.getStartingDate(),

                ////////////////////////////////////////// Listener for Day Of Month
                new ProjectDocumentListener(p)
                {
                    @Override
                    protected void manipulate(String docText)
                    {
                        Project pp = getMyProject();

                        GregorianCalendar cal = pp.getStartingDate();

                        DateInput.setDayOfMonth(cal, docText);

                        // pp.setStartingDate(cal);
                    }
                },

                ///////////////////////////////////////////////// Listener for Month

                // LOADED COMBO BOX
                new ProjectActionListener(p)
                {
                    @Override
                    public void actionPerformed(ActionEvent event)
                    {
                        System.err.println("LOADED COMBO BOX (StartingDate) - Month");

                        Project pp = getMyProject();

                        JComboBox source = (JComboBox)event.getSource();

                        source.removeActionListener(this);

                        source.addActionListener(

                            // COMBO BOX ACTION
                            new ProjectActionListener(pp)
                            {
                                @Override
                                public void actionPerformed(ActionEvent event)
                                {
                                    System.err.println("COMBO BOX ACTION (StartingDate) - Month");

                                    Project pp = getMyProject();

                                    JComboBox source = (JComboBox)event.getSource();

                                    GregorianCalendar cal = pp.getStartingDate();

                                    DateInput.setMonth(cal, source.getSelectedIndex());

                                    //pp.setStartingDate(cal);
                                }
                            }
                        );
                    }
                },

                ////////////////////////////////////////////////// Listener for Year
                new ProjectDocumentListener(p)
                {
                    @Override
                    protected void manipulate(String docText)
                    {
                        Project pp = getMyProject();

                        GregorianCalendar cal = pp.getStartingDate();

                        DateInput.setYear(cal, docText);

                        // pp.setStartingDate(cal); unneccessary.
                    }
                }
            );

            theLabel = new JLabel("Project Starting Date:");

            nvp = new NameValuePair(

                theLabel,

                dateInput
            );
        }
        else
        {
            nvp = new NameValuePair(

                new JLabel("Project Starting Date:"),

                new JLabel( DateInput.getDateAsString(p.getStartingDate()) )
            );
        }
        
        nvp.set_ValueHeight_IsFixed(true);
        
        content.add(nvp);
        
        
        
        
        
        
        
        
        // PROPOSED FINISHING DATE
        
        if (m_editable)
        {
            ProjectDateInput dateInput = new ProjectDateInput(

                p.getProposedFinishingDate(),

                ////////////////////////////////////////// Listener for Day Of Month
                new ProjectDocumentListener(p)
                {
                    @Override
                    protected void manipulate(String docText)
                    {
                        Project pp = getMyProject();

                        GregorianCalendar cal = pp.getProposedFinishingDate();

                        DateInput.setDayOfMonth(cal, docText);

                        // pp.setProposedFinishingDate(cal);
                    }
                },

                ///////////////////////////////////////////////// Listener for Month


                // LOADED COMBO BOX
                new ProjectActionListener(p)
                {
                    @Override
                    public void actionPerformed(ActionEvent event)
                    {
                        System.err.println("LOADED COMBO BOX (ProposedFinishingDate) - Month");

                        Project pp = getMyProject();

                        JComboBox source = (JComboBox)event.getSource();

                        source.removeActionListener(this);

                        source.addActionListener(

                            // COMBO BOX ACTION
                            new ProjectActionListener(pp)
                            {
                                @Override
                                public void actionPerformed(ActionEvent event)
                                {
                                    System.err.println("COMBO BOX ACTION (ProposedFinishingDate) - Month");

                                    Project pp = getMyProject();

                                    JComboBox source = (JComboBox)event.getSource();

                                    GregorianCalendar cal = pp.getProposedFinishingDate();

                                    DateInput.setMonth(cal, source.getSelectedIndex());

                                    //pp.setProposedFinishingDate(cal);
                                }
                            }
                        );
                    }
                },

                ////////////////////////////////////////////////// Listener for Year
                new ProjectDocumentListener(p)
                {
                    @Override
                    protected void manipulate(String docText)
                    {
                        Project pp = getMyProject();

                        GregorianCalendar cal = pp.getProposedFinishingDate();

                        DateInput.setYear(cal, docText);

                        //pp.setProposedFinishingDate(cal);
                    }
                }
            );

            theLabel = new JLabel("Proposed Finishing Date:");

            nvp = new NameValuePair(

                theLabel,

                dateInput
            );
        }
        else
        {
            nvp = new NameValuePair(

                new JLabel("Proposed Finishing Date:"),

                new JLabel( DateInput.getDateAsString(p.getProposedFinishingDate()) )
            );
        }
        
        nvp.set_ValueHeight_IsFixed(true);
        
        content.add(nvp);
        
        addSpacer(content);
        
        
        
        
        
        
        
        
        // ACTUAL FINISHING DATE
        
        
        ProjectDateInput dateInput = new ProjectDateInput(

            p.getActualFinishingDate(),

            ////////////////////////////////////////// Listener for Day Of Month
            new ProjectDocumentListener(p)
            {
                @Override
                protected void manipulate(String docText)
                {
                    Project pp = getMyProject();

                    GregorianCalendar cal = pp.getActualFinishingDate();

                    if (cal == null)
                    {
                        // Actual Finishing Date is null. Create a new object.

                        cal = (GregorianCalendar)GregorianCalendar.getInstance(); // today, now.
                    }

                    DateInput.setDayOfMonth(cal, docText);

                    pp.setActualFinishingDate(cal);
                }
            },

            ///////////////////////////////////////////////// Listener for Month

            // LOADED COMBO BOX
            new ProjectActionListener(p)
            {
                @Override
                public void actionPerformed(ActionEvent event)
                {
                    System.err.println("LOADED COMBO BOX (ActualFinishingDate) - Month");

                    Project pp = getMyProject();

                    JComboBox source = (JComboBox)event.getSource();

                    source.removeActionListener(this);

                    source.addActionListener(

                        // COMBO BOX ACTION
                        new ProjectActionListener(pp)
                        {
                            @Override
                            public void actionPerformed(ActionEvent event)
                            {
                                System.err.println("COMBO BOX ACTION (ActualFinishingDate) - Month");

                                Project pp = getMyProject();

                                JComboBox source = (JComboBox)event.getSource();

                                GregorianCalendar cal = pp.getActualFinishingDate();

                                if (cal == null)
                                {
                                    // Actual Finishing Date is null. Create a new object.

                                    cal = (GregorianCalendar)GregorianCalendar.getInstance(); // today, now.
                                }

                                DateInput.setMonth(cal, source.getSelectedIndex());

                                pp.setActualFinishingDate(cal);
                            }
                        }
                    );
                }
            },

            ////////////////////////////////////////////////// Listener for Year
            new ProjectDocumentListener(p)
            {
                @Override
                protected void manipulate(String docText)
                {
                    Project pp = getMyProject();

                    GregorianCalendar cal = pp.getActualFinishingDate();

                    if (cal == null)
                    {
                        // Actual Finishing Date is null. Create a new object.

                        cal = (GregorianCalendar)GregorianCalendar.getInstance(); // today, now.
                    }

                    DateInput.setYear(cal, docText);

                    pp.setActualFinishingDate(cal);
                }
            }
        );

        // JCheckBox to set if the project is finished or not.

        m_projFinCheckBox = new ProjectCheckBox("Project is Finished");

        m_projFinCheckBox.setSelected(p.isFinished());

        m_projFinCheckBox.setMyProject(p);

        m_projFinCheckBox.addItemListener(

            new ItemListener()
            {
                @Override
                public void itemStateChanged(ItemEvent e)
                {
                    ProjectCheckBox b = (ProjectCheckBox)e.getItemSelectable();

                    Project p = b.getMyProject(); // get the project that is to be manipulated.

                    if (b.isSelected())
                    {
                        p.setFinished(true);
                    }
                    else
                    {
                        p.setFinished(false);
                    }
                    repaintGui();
                }
            }
        );
        
        if (m_editable)
        {
            m_projFinCheckBox.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);

            theLabel = new JLabel("");

            nvp = new NameValuePair(

                m_projFinCheckBox,

                theLabel
            );

            nvp.set_ValueHeight_IsFixed(true);

            content.add(nvp);
        }
        
        // Show the finish-date input ONLY IF the project is finished.
        
        theLabel = new JLabel("Actual Finishing Date:");
        
        if (m_editable && p.isFinished())
        {
            
            nvp = new NameValuePair(

                theLabel,

                dateInput
            );

            nvp.set_ValueHeight_IsFixed(true);

            content.add(nvp);
        }
        else if (!m_editable)
        {
            String finString = DateInput.getDateAsString(p.getActualFinishingDate());
            
            if (finString == null)
            {
                finString = "Project not finished.";
            }
            
            nvp = new NameValuePair(

                theLabel,

                new JLabel(finString)
            );
            
            nvp.set_ValueHeight_IsFixed(true);

            content.add(nvp);
        }
        
        return content;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * Given a Consultant, generate its name-value-pair GUI elements, for display in the details panel.
     * 
     * Each NameValuePair object is typically a JLabel and JTextField.
     * 
     * @param c Consultant - object for which to generate DetailsPanel gui elements. May be null. If null, this method returns immediately.
     * 
     * @return ArrayList<NameValuePair> array of paired GUI elements. (Or null if nothing was generated.)
     */
    public ArrayList<NameValuePair> generateConsultantDetailNVP(Consultant c) throws ControlException
    {
        if (c == null)
        {
            return null;
        }
        
        
        
        
        ArrayList<NameValuePair> content = new ArrayList<NameValuePair>();
        
        NameValuePair nvp;
        
        JComponent value;
        
        // Need to display this data in the DetailsPanel:
        
        //     CONSULTANT id  (Employee ID)
        
        //     CONSULTANT name
        
        //     CONSULTANT gender
        
        //     CONSULTANT address
        
        //     CONSULTANT contract - Combo box: Consultant Type.
        
        //          FULL-TIME CONSULTANT - salary        (May be hidden)
        
        //          PART-TIME CONSULTANT - hourly wage   (May be hidden)
        
        //          PART-TIME CONSULTANT - max hours     (May be hidden)
        
        //     CONSULTANT list of projects
        
        //     CONSULTANT picture - Date Taken
        
        //     CONSULTANT picture - Filename
        
        //     CONSULTANT picture - actual image.
        
        
        
        
        
        
        
        // CONSULTANT ID
        
        nvp = new NameValuePair(
        
            new JLabel("      Employee ID:"),

            new JLabel(Integer.toString(c.getId())) // Never editable.
        );
        
        content.add(nvp);
        
        
        
        
        
        // CONSULTANT NAME
        
        m_consultantNameInput = new JTextField(c.getName());
        
        m_consultantNameInput.setColumns(31);
        
        ConsultantNameChangeHandler nameChangeHandler = new ConsultantNameChangeHandler();
        
        nameChangeHandler.setConsultant(c);  // Tell the handler what object to manipulate.
        
        if (m_editable)
        {
            m_consultantNameInput.getDocument().addDocumentListener(nameChangeHandler);
        }
        
        if (m_editable)
        {
            nvp = new NameValuePair(

                new JLabel("      Name:"),

                m_consultantNameInput
            );
        }
        else
        {
            nvp = new NameValuePair(

                new JLabel("      Name:"),

                new JLabel(c.getName())
            );
        }
        
        nvp.set_ValueHeight_IsFixed(true);
        
        content.add(nvp);
        
        
        
        
        
        
        
        
        
        // CONSULTANT GENDER - SELECT FROM COMBO BOX
        
        // Get a String array of the names of the possible gender types.
        
        ArrayList<String> genderOptions = new ArrayList<String>();
        
        for (Employee.GenderType t : Employee.GenderType.values())
        {
            genderOptions.add(t.name());
        }
        
        String[] genderOp = new String[genderOptions.size()];
        
        genderOp = genderOptions.toArray(genderOp);
        
        
        
        
        // Make a combo box, using the string array of different gender types.
        
        m_genderComboBox = new ConsultantComboBox(genderOp);
        
        m_genderComboBox.setMyConsultant(c); // Allows the event handler code to know what consultant it should manipulate.
        
        ActionListener comboHandler = new GenderComboBoxHandler();
        
        if (m_editable)
        {
            m_genderComboBox.addActionListener(comboHandler);
        }
        
        
        
        // Get the combo box index that we want to be (already) selected.
        
        int comboBoxIndex = 0;
        
        Employee.GenderType actualGender = c.getGender();
        
        int i = 0;

        for (Employee.GenderType t : Employee.GenderType.values())
        {
            if (t.equals(actualGender))
            {
                comboBoxIndex = i;
            }
            ++i;
        }
        
        m_genderComboBox.setSelectedIndex(comboBoxIndex);
        
        
        
        
        // Create the gender combo-box.
        
        if (m_editable)
        {
            nvp = new NameValuePair(

                new JLabel("      Gender:"),

                m_genderComboBox
            );
        }
        else
        {
            nvp = new NameValuePair(

                new JLabel("      Gender:"),

                new JLabel(c.getGender().toString())
            );
        }
        nvp.setValueDimensions(
                
            new Dimension( 343,  20 ),

            new Dimension( 343,  20 ),
            
            new Dimension( 343,  20 )
        );
        
        nvp.set_ValueWidth_IsFixed(true);
        
        nvp.set_ValueHeight_IsFixed(true);
        
        content.add(nvp);
        
        addSpacer(content);
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        // CONSULTANT ADDRESS
        
        nvp = new NameValuePair(
        
            new JLabel("Contact Address:"),

            new JLabel("") // blank field
        );
        
        nvp.set_ValueHeight_IsFixed(true);
        
        content.add(nvp);
        
        
        
        
        // ...CONSULTANT ADDRESS - STREET NUMBER
        
        m_streetNumberInput = new JTextField(Integer.toString(c.getAddress().getStreetNumber()));
        
        m_streetNumberInput.setColumns(31);
        
        ConsultantDocumentListener changeHandler = new StreetNumberChangeHandler();
        
        changeHandler.setConsultant(c);  // Tell the handler what object to manipulate.
        
        if (m_editable)
        {
            m_streetNumberInput.getDocument().addDocumentListener(changeHandler);
        }
        
        if (m_editable)
        {
            nvp = new NameValuePair(

                new JLabel("      Street Number:"),

                m_streetNumberInput
            );
        }
        else
        {
            nvp = new NameValuePair(

                new JLabel("      Street Number:"),

                new JLabel(Integer.toString(c.getAddress().getStreetNumber()))
            );
        }
        nvp.set_ValueHeight_IsFixed(true);
        
        content.add(nvp);
        
        
        
        
        
        // ...CONSULTANT ADDRESS - STREET NAME
        
        m_streetNameInput = new JTextField(c.getAddress().getStreetName());
        
        m_streetNameInput.setColumns(31);
        
        changeHandler = new StreetNameChangeHandler();
        
        changeHandler.setConsultant(c);  // Tell the handler what object to manipulate.
        
        if (m_editable)
        {
            m_streetNameInput.getDocument().addDocumentListener(changeHandler);
        }
        
        if (m_editable)
        {
            nvp = new NameValuePair(
        
                new JLabel("      Street Name:"),

                m_streetNameInput
            );
        }
        else
        {
            nvp = new NameValuePair(

                new JLabel("      Street Name:"),

                new JLabel(c.getAddress().getStreetName())
            );
        }
        
        nvp.set_ValueHeight_IsFixed(true);
        
        content.add(nvp);
        
        
        
        
        // ...CONSULTANT ADDRESS - SUBURB
        
        m_suburbInput = new JTextField(c.getAddress().getSuburb());
        
        m_suburbInput.setColumns(31);
        
        changeHandler = new SuburbChangeHandler();
        
        changeHandler.setConsultant(c);  // Tell the handler what object to manipulate.
        
        if (m_editable)
        {
            m_suburbInput.getDocument().addDocumentListener(changeHandler);
        }
        
        if (m_editable)
        {
            nvp = new NameValuePair(

                new JLabel("      Suburb:"),

                m_suburbInput
            );
        }
        else
        {
            nvp = new NameValuePair(

                new JLabel("      Suburb:"),

                new JLabel(c.getAddress().getSuburb())
            );
        }
        nvp.set_ValueHeight_IsFixed(true);
        
        content.add(nvp);
        
        
        
        
        // ...CONSULTANT ADDRESS - POST CODE
        
        m_postCodeInput = new JTextField(Integer.toString(c.getAddress().getPostCode()));
        
        m_postCodeInput.setColumns(31);
        
        changeHandler = new PostCodeChangeHandler();
        
        changeHandler.setConsultant(c);  // Tell the handler what object to manipulate.
        
        if (m_editable)
        {
            m_postCodeInput.getDocument().addDocumentListener(changeHandler);
        }
        
        if (m_editable)
        {
            nvp = new NameValuePair(

                new JLabel("      Post Code:"),

                m_postCodeInput
            );
        }
        else
        {
            nvp = new NameValuePair(

                new JLabel("      Post Code:"),

                new JLabel(Integer.toString(c.getAddress().getPostCode()))
            );
        }
        nvp.set_ValueHeight_IsFixed(true);
        
        content.add(nvp);
        
        addSpacer(content);
        
        
        
        
        
        
        
        
        
        // CONSULTANT CONTRACT (CONSULTANT TYPE) - SELECT FROM COMBO BOX
        
        Consultant.ConsultantType consultantType = c.getMyType(); // FULL_TIME_CONSULTANT or PART_TIME_CONSULTANT
        
        FullTimeConsultant fullTimeConsultant = null;
        
        PartTimeConsultant partTimeConsultant = null;
        
        comboBoxIndex = 0;
        
        
        // Polymorphism is better than rtti, but I would have to include gui logic 
        
        // in the data model if I wanted to generate gui components through polymorphism. 
        
        // This would compromise the separation of data from its representation, which is 
        
        // a separation I want to maintain - in case the representation changes,
        
        // or the model changes.
        
        // Also, it seems wasteful to keep extra data inside the model when that is what I
        
        // serialize and write to disk.
        
        // My approach has been to keep the data model as abstract as possible.
        
        
        // Get the type of consultant
        
        if (consultantType == Consultant.ConsultantType.FULL_TIME_CONSULTANT)
        {
            try
            {
                fullTimeConsultant = (FullTimeConsultant)c; // Downcast.

                comboBoxIndex = 0;

            }
            catch(ClassCastException failedCast1)
            {
                fullTimeConsultant = null; // Not a full-time consultant.
                
                System.err.println("Failed to cast consultant. System.exit()");

                System.exit(0); // We should have been able to cast the object.
            }
        }
        else if (consultantType == Consultant.ConsultantType.PART_TIME_CONSULTANT)
        {
            try
            {
                partTimeConsultant = (PartTimeConsultant)c; // Downcast.

                consultantType = Consultant.ConsultantType.PART_TIME_CONSULTANT;

                comboBoxIndex = 1;
            }
            catch(ClassCastException failedCast2)
            {
                partTimeConsultant = null; // Not a part-time consultant.

                System.err.println("Failed to cast consultant. System.exit()");

                System.exit(0); // We should have been able to cast the object.
            }
        }
        
        
        
        
        
        
        
        // (...CONSULTANT CONTRACT) PROVIDE A COMBO-BOX TO CHANGE THE CONSULTANT-TYPE.
        
        m_consultantTypeComboBox = new ConsultantComboBox(
                
            new String[]{
                
                Consultant.ConsultantType.FULL_TIME_CONSULTANT.toString(),
                
                Consultant.ConsultantType.PART_TIME_CONSULTANT.toString()
            }
        );
        
        m_consultantTypeComboBox.setMyConsultant(c); // Allows the event handler code to know what consultant it should manipulate.
  
        // When the combo box first appears it fires an event. We want to ignore this event.
        
        // So I will listen for it, and then attach the proper handler.
        
        if (m_editable)
        {
            m_consultantTypeComboBox.addActionListener(new ConsTypeComboBoxLoaded()); // listen for event.
        }
        
        m_consultantTypeComboBox.setSelectedIndex(comboBoxIndex);
        
        if (m_editable)
        {
            nvp = new NameValuePair(

                new JLabel("Contract:"),

                m_consultantTypeComboBox
            );
        }
        else
        {
            nvp = new NameValuePair(

                new JLabel("Contract:"),

                new JLabel(consultantType.toString())
            );
        }
        
        nvp.setValueDimensions(
                
            new Dimension( 343,  20 ),

            new Dimension( 343,  20 ),
            
            new Dimension( 343,  20 )
        );
        
        nvp.set_ValueWidth_IsFixed(true);
        
        nvp.set_ValueHeight_IsFixed(true);
        
        content.add(nvp);
        
        
        
        
        
        
        
        
        
        
        
        
        // (...CONSULTANT CONTRACT) Generate FULL_TIME and PART_TIME input fields,
        
        // The input fields will be hidden if we don't have any data for them.
        
        // This will allow me to show them again, on demand.
        
        if (consultantType == Consultant.ConsultantType.FULL_TIME_CONSULTANT)
        {
            
            // FULL-TIME CONSULTANT ANNUAL SALARY

            JTextField annualSalaryField = new JTextField(Integer.toString(fullTimeConsultant.getAnnualSalary()));
            
            annualSalaryField.setColumns(31);
            
            m_AnnualSalaryTitle = new JLabel("      Annual Salary:");
            
            m_AnnualSalaryInput = annualSalaryField;
            
            if (m_editable)
            {
                nvp = new NameValuePair(

                    m_AnnualSalaryTitle,

                    m_AnnualSalaryInput
                );
            }
            else
            {
                nvp = new NameValuePair(

                    m_AnnualSalaryTitle,

                    new JLabel(Integer.toString(fullTimeConsultant.getAnnualSalary()))
                );
            }

            m_AnnualSalaryTitle.setVisible(true);
            
            m_AnnualSalaryInput.setVisible(true);

            SalaryDocListener listener = new SalaryDocListener();
            
            listener.setConsultant(fullTimeConsultant); // Allows the event handler code to know what object to manipulate.
            
            if (m_editable)
            {
                m_AnnualSalaryInput.getDocument().addDocumentListener(listener);
            }
            nvp.set_ValueHeight_IsFixed(true);
        
            content.add(nvp);
            
            
            // HIDDEN: PART-TIME CONSULTANT HOURLY RATE

            JTextField hourlyRateInput = new JTextField();

            hourlyRateInput.setColumns(31);
            
            m_HourlyRateTitle = new JLabel("      Hourly Rate:");
            
            m_HourlyRateInput = hourlyRateInput;
            
            if (m_editable)
            {
                nvp = new NameValuePair(

                    m_HourlyRateTitle,  // HIDDEN

                    m_HourlyRateInput   // HIDDEN
                );
            }
            else
            {
                nvp = new NameValuePair(

                    m_HourlyRateTitle,  // HIDDEN

                    new JLabel()        // HIDDEN
                );
            }
            
            m_HourlyRateTitle.setVisible(false);
            
            m_HourlyRateInput.setVisible(false);
            
            nvp.set_ValueHeight_IsFixed(true);
        
            if (m_editable)
            {
                content.add(nvp);
            }
            
            // HIDDEN: PART-TIME CONSULTANT MAX ALLOWED HOURS

            JTextField maxHoursInput = new JTextField();
            
            maxHoursInput.setColumns(31);
            
            m_MaxAllowedHoursTitle = new JLabel("      Max Working Hours:");
            
            m_MaxAllowedHoursInput = maxHoursInput;
            
            if (m_editable)
            {
                nvp = new NameValuePair(

                    m_MaxAllowedHoursTitle,  // HIDDEN

                    m_MaxAllowedHoursInput   // HIDDEN
                );
            }
            else
            {
                nvp = new NameValuePair(

                    m_MaxAllowedHoursTitle,  // HIDDEN

                    new JLabel()             // HIDDEN
                );
            }
            
            m_MaxAllowedHoursTitle.setVisible(false);
            
            m_MaxAllowedHoursInput.setVisible(false);

            nvp.set_ValueHeight_IsFixed(true);
        
            if (m_editable)
            {
                content.add(nvp);
            }
            
            
            
        }
        else if (consultantType == Consultant.ConsultantType.PART_TIME_CONSULTANT)
        {
            // HIDDEN: FULL-TIME CONSULTANT ANNUAL SALARY

            JTextField annualSalInput = new JTextField();
            
            annualSalInput.setColumns(31);
            
            m_AnnualSalaryTitle = new JLabel("      Annual Salary:");
            
            m_AnnualSalaryInput = annualSalInput;
            
            if (m_editable)
            {
                nvp = new NameValuePair(

                    m_AnnualSalaryTitle,   // HIDDEN

                    m_AnnualSalaryInput    // HIDDEN
                );
            }
            else
            {
                nvp = new NameValuePair(

                    m_AnnualSalaryTitle,   // HIDDEN

                    new JLabel()           // HIDDEN
                );
            }

            m_AnnualSalaryTitle.setVisible(false);
            
            m_AnnualSalaryInput.setVisible(false);
            
            nvp.set_ValueHeight_IsFixed(true);
        
            if (m_editable)
            {
                content.add(nvp);
            }
            
            
                
            
            // PART-TIME CONSULTANT HOURLY RATE
            
            JTextField hourlyRateInput = new JTextField(Integer.toString(partTimeConsultant.getHourlyRate()));
            
            hourlyRateInput.setColumns(31);
            
            m_HourlyRateTitle = new JLabel("      Hourly Rate:");
            
            m_HourlyRateInput = hourlyRateInput;
            
            if (m_editable)
            {
                nvp = new NameValuePair(

                    m_HourlyRateTitle,

                    m_HourlyRateInput
                );
            }
            else
            {
                nvp = new NameValuePair(

                    m_HourlyRateTitle,

                    new JLabel(Integer.toString(partTimeConsultant.getHourlyRate()))
                );
            }
            
            m_HourlyRateTitle.setVisible(true);
            
            m_HourlyRateInput.setVisible(true);

            HourlyRateDocListener listener1 = new HourlyRateDocListener();
            
            listener1.setConsultant(partTimeConsultant); // Allows the event handler code to know what object to manipulate.
            
            if (m_editable)
            {
                m_HourlyRateInput.getDocument().addDocumentListener(listener1);
            }
            
            nvp.set_ValueHeight_IsFixed(true);
        
            content.add(nvp);
            
            
            // PART-TIME CONSULTANT MAX ALLOWED HOURS

            JTextField maxHoursInput = new JTextField(Integer.toString(partTimeConsultant.getMaxHours()));
                    
            maxHoursInput.setColumns(31);
            
            m_MaxAllowedHoursTitle = new JLabel("      Max Allowed Hours:");
            
            m_MaxAllowedHoursInput = maxHoursInput;
            
            if (m_editable)
            {
                nvp = new NameValuePair(

                    m_MaxAllowedHoursTitle,

                    m_MaxAllowedHoursInput
                );
            }
            else
            {
                nvp = new NameValuePair(

                    m_MaxAllowedHoursTitle,

                    new JLabel(Integer.toString(partTimeConsultant.getMaxHours()))
                );
            }
            
            m_MaxAllowedHoursTitle.setVisible(true);
            
            m_MaxAllowedHoursInput.setVisible(true);

            MaxHoursDocListener listener2 = new MaxHoursDocListener();
            
            listener2.setConsultant(partTimeConsultant); // Allows the event handler code to know what object to manipulate.

            if (m_editable)
            {
                m_MaxAllowedHoursInput.getDocument().addDocumentListener(listener2);
            }
            
            nvp.set_ValueHeight_IsFixed(true);
        
            content.add(nvp);
        }
        
        addSpacer(content);
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        // LIST OF PROJECTS ASSOCIATED WITH THIS CONSULTANT:
    
        ArrayList<String> projectNames = c.getProjectNames();
        
        if (projectNames.size() > 0)
        {
            
            
            // Consultant is assigned to (at least one) project.
            
            nvp = new NameValuePair(

                new JLabel(String.format("Assigned to projects:")),

                new JLabel("") // blank value.  Rows will follow.

            );

            nvp.set_ValueHeight_IsFixed(true);

            content.add(nvp);
            
            
            
            
            // Rows:  One row for each project that is associated with this consultant.

            ListIterator<String> iterator = projectNames.listIterator();

            while(iterator.hasNext())
            {
                try
                {
                    String projName = iterator.next();

                    RemoveProjectButton remBtn = new RemoveProjectButton("Remove from consultant's responsibility");

                    remBtn.setName(projName); // Name of component.

                    Project projToRem = m_model.getProjectByName(projName); // returns null if not found.

                    remBtn.setRemovableProject(projToRem); // throws exception if project is null.

                    remBtn.setConsultantToRemoveFrom(c); // The consultant to deregister the project from if clicked.

                    DeassignProjectHandler deassignHandler = new DeassignProjectHandler(); // java.lang.NoClassDefFoundError ?

                    if (m_editable)
                    {
                        remBtn.addActionListener(deassignHandler);
                    }
                    
                    if (m_editable)
                    {
                        nvp = new NameValuePair(

                            new JLabel("      " + projName), // name of project. May need to trim later.

                            remBtn                           // button to remove from consultant's responsibility.
                        );
                    }
                    else
                    {
                        nvp = new NameValuePair(
                           
                            new JLabel(),         // blank
                                
                            new JLabel(projName)  // name of project.
                        );
                    }
                    
                    nvp.setValueDimensions(

                        new Dimension( 343,  20 ),

                        new Dimension( 343,  20 ),

                        new Dimension( 343,  20 )
                    );

                    nvp.set_ValueWidth_IsFixed(true);

                    nvp.set_ValueHeight_IsFixed(true);

                    content.add(nvp);
                }
                catch(ControlException exception)
                {
                    System.err.println(exception.getMessage());

                    // System.err.println("??? Tried to make a remove button for a project that has been deleted in the other panel??? Should have been disassociated.");

                    // disassociate(projToRem, c);  /// CANNOT disassociate a null value !  This problem originated somewhere else.
                }
            }
        }
        else
        {
            // Consultant is not assigned to any projects.
        
            nvp = new NameValuePair(

                new JLabel(String.format("Assigned to projects:")),

                new JLabel("(none)")

            );

            nvp.set_ValueHeight_IsFixed(true);

            content.add(nvp);
        }
        
        addSpacer(content);;
        
        
        
        
        
        
        
        
        
        
        
        
        
        // PICTURE OF CONSULTANT - MAIN LABEL
        
        nvp = new NameValuePair(
        
            new JLabel(String.format("Picture of Consultant")),

            new JLabel("")
        );
        
        nvp.set_ValueHeight_IsFixed(true);
            
        content.add(nvp);
        
        
        
        
        // PICTURE OF CONSULTANT - DATE TAKEN
        
        ConsultantDateInput pictureDateInput = new ConsultantDateInput(
                
            c.getPicture().getDateTaken(),

            // Consultant picture date taken - set the DAY_OF_MONTH
                
            new ConsultantDocumentListener()
            {
                @Override
                protected void manipulate(String docText)
                {
                    Consultant c = getMyConsultant();
                    
                    int dayOfMonth;
                    
                    GregorianCalendar picCal;
                    
                    try
                    {
                        picCal = (GregorianCalendar)c.getPicture().getDateTaken();
                    }
                    catch(NullPointerException npe)
                    {
                        System.out.println("Picture.DATE_TAKEN is null.");
                        
                        picCal = (GregorianCalendar)GregorianCalendar.getInstance(); // today, now.
                    }
                    
                    try
                    {
                        // Parse the input.
                        
                        dayOfMonth = Integer.parseInt(docText);
                        
                    }
                    catch(NumberFormatException nfe)
                    {
                        // bad input. Revert.
                        
                        dayOfMonth = picCal.get(GregorianCalendar.DAY_OF_MONTH);
                    }
                    
                    DateInput.setDayOfMonth(picCal, dayOfMonth);
                }
            },

                
                
            // Consultant picture date taken - set the MONTH
                
            // LOADED COMBO BOX
            
            new ConsultantActionListener(c)
            {
                @Override
                public void actionPerformed(ActionEvent event)
                {
                    System.err.println("LOADED COMBO BOX: consultant.picture.dateTaken.MONTH");
                    
                    Consultant cc = getMyConsultant();
                    
                    JComboBox source = (JComboBox)event.getSource();
                    
                    source.removeActionListener(this);
                    
                    source.addActionListener(
                            
                        // COMBO BOX ACTION
                        new ConsultantActionListener(cc)
                        {
                            @Override
                            public void actionPerformed(ActionEvent event)
                            {
                                System.err.println("COMBO BOX ACTION: consultant.picture.dateTaken.MONTH");
                                
                                Consultant cc = getMyConsultant();

                                JComboBox source = (JComboBox)event.getSource();

                                GregorianCalendar cal = cc.getPicture().getDateTaken();

                                try
                                {
                                    cal.set(GregorianCalendar.MONTH, source.getSelectedIndex());
                                }
                                catch(NumberFormatException nfe)
                                {
                                    cal.set(GregorianCalendar.MONTH, 0);
                                }
                            }
                        }
                    );
                }
            },

            // Consultant picture date taken - set the YEAR
                
            new ConsultantDocumentListener()
            {
                @Override
                protected void manipulate(String docText)
                {
                    Consultant c = getMyConsultant();
                    
                    int year;
                    
                    GregorianCalendar picCal;
                    
                    try
                    {
                        picCal = (GregorianCalendar)c.getPicture().getDateTaken();
                    }
                    catch(NullPointerException npe)
                    {
                        System.out.println("Picture.DATE_TAKEN is null.");
                        
                        picCal = (GregorianCalendar)GregorianCalendar.getInstance(); // today, now.
                    }
                    
                    try
                    {
                        // Parse the input.
                        
                        year = Integer.parseInt(docText);
                        
                    }
                    catch(NumberFormatException nfe)
                    {
                        // bad input. Revert.
                        
                        year = picCal.get(GregorianCalendar.YEAR);
                    }
                    
                    DateInput.setYear(picCal, year);
                }
            }
        );
        
        pictureDateInput.setMyConsultant(c); // tell the input what object its handlers are supposed to manipulate.
        
        if (m_editable)
        {
            nvp = new NameValuePair(

                new JLabel(String.format("      Date taken:")),

                pictureDateInput
            );
        }
        else
        {
            String dateString = DateInput.getDateAsString(c.getPicture().getDateTaken());
            
            nvp = new NameValuePair(

                new JLabel(String.format("      Date taken:")),

                new JLabel(dateString)
            );
        }
        nvp.set_ValueHeight_IsFixed(true);
        
        nvp.set_ValueWidth_IsFixed(true);
        
        content.add(nvp);
        
        
        
        
        
        
        
        
        
        
        
        // PICTURE OF CONSULTANT - BUTTON TO CHOOSE THE IMAGE OF THE CONSULTANT.
        
        JPanel imageChooserButton = new JPanel();
        
        imageChooserButton.setLayout(new BoxLayout(imageChooserButton, BoxLayout.X_AXIS));
        
        String longFileName = c.getPicture().getFileName();
        
        if (longFileName == null)
            longFileName = "";
        
        int maxDisplayLength = 40;
        
        //String[] splitted = longFileName.split("^.*\\.*$");// use regex to remove all but filename.
        
        if (longFileName.length() > maxDisplayLength)
        {
            longFileName = "..." + longFileName.substring(longFileName.length() - maxDisplayLength);
        }
        
        JLabel fileString = new JLabel(longFileName);
        
        imageChooserButton.add(fileString);
        
        imageChooserButton.add(Box.createHorizontalStrut(10));
        
        JButton imageSelectionButton = new JButton("Choose file");
        
        ImageSelectionHandler imageSelectHandler = new ImageSelectionHandler();
        
        imageSelectHandler.setMyConsultant(c); // so the handler will know what object to manipulate.
        
        if (m_editable)
        {
            imageSelectionButton.addActionListener(imageSelectHandler);
        }
        
        imageChooserButton.add(imageSelectionButton);
        
        if (m_editable)
        {
            nvp = new NameValuePair(

                new JLabel(String.format("      Filename:")),

                imageChooserButton
            );
        }
        else
        {
            nvp = new NameValuePair(

                new JLabel(String.format("      Filename:")),

                fileString
            );
        }
        nvp.setValueDimensions(
                
            new Dimension( 343,  20 ),

            new Dimension( 343,  20 ),
            
            new Dimension( 343,  20 )
        );
        
        nvp.set_ValueHeight_IsFixed(false);
        
        nvp.set_ValueWidth_IsFixed(false);
        
        content.add(nvp);
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        // PICTURE OF CONSULTANT - ACTUAL IMAGE
        
        ImageIcon icon = c.getPicture().getImageIcon(); // may be null
        
        if (icon == null)
        {
            icon = new ImageIcon(); // no picture will be displayed.
        }
        
        JLabel labelWithConsultantImage = new JLabel(icon);
        
//        JScrollPane imageScrollPane = new JScrollPane(
//
//            labelWithConsultantImage,
//
//            JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
//
//            JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED
//        );
        
        nvp = new NameValuePair(
        
            new JLabel(String.format("")),

            labelWithConsultantImage // imageScrollPane
        );
        
        nvp.setValueDimensions(
                
            new Dimension( 343,  64  ),

            new Dimension( 343,  600 ),
            
            new Dimension( 343,  343 )
        );
        
        // nvp.applySizeConstrait(imageScrollPane);
        
//        nvp.setValueDimensions(
//            
//            new Dimension(64, 64),
//            
//            new Dimension(600, 600),
//                
//            new Dimension(500, 400)
//            
//        );
        
        nvp.set_ValueHeight_IsFixed(true);
        
        nvp.set_ValueWidth_IsFixed(true);
        
        content.add(nvp);
        
        
        
        
        return content;
    }
    
    
    
    
    
    
    
    
    
    
    
    /**
     * Debug method only.
     * 
     * Called when the user clicks the debug print button, if it is not hidden.
     * 
     * Here is the place to call whatever print methods you need.
     */
    private void printDebugInfo()
    {
        // Place calls to debug print methods here.
        
        // showModel();
        
        showModelLinkage();
    }
    
    
    
    
    
    
    /**
     * Debug method only.
     * 
     * Shows which projects and consultants are linked to each other.
     */
    private void showModelLinkage()
    {
        // Show project name, and linked consultant.
        
        System.out.println();
        
        System.out.println();
        
        System.out.printf("MODEL LINKAGE: %n%s", m_model.getProjectLinkage());
        
        System.out.printf(m_model.getConsultantLinkage());
    }
    
    
    
    
    
    /**
     * Debug method only.
     * 
     * Prints the data model to the console.
     */
    private void showModel()
    {
        System.out.printf("MODEL: %n%n%s%n%n", m_model.toString());
    }
    
    
    
    
    
    
    
    
    /**
     * Update the GUI so it accurately reflects the contents of the data model.
     * 
     * Warning:
     * 
     *    I had some situations where a stack overflow was being caused by 
     * 
     *    calling this method from a combo box event handler. Make sure you
     * 
     *    listen for the initial ActionEvent of the combo box APPEARING,
     * 
     *    then replace the ActionListener with one that responds to it
     * 
     *    being clicked.
     */
    private void repaintGui()
    {
        try
        {
            
            if(m_tabbedPane.getSelectedIndex() == 0)
            {
                // Update the projects tab.
                
                m_projectTab.setDetailsNVP(generateProjectDetailNVP(m_currentlySelectedProject));
                
                m_projectTab.setListNames(m_model.getProjectNames());

                m_projectTab.setListPanelSelection(m_recentIndex_projectListPanel);
                
            }
            else
            {
                // Update the consultants tab.

                m_consultantTab.setDetailsNVP(generateConsultantDetailNVP(m_currentlySelectedConsultant));
                
                m_consultantTab.setListNames(m_model.getConsultantNames());

                m_consultantTab.setListPanelSelection(m_recentIndex_consultantListPanel);
                
            }
            
        }
        catch(ControlException e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    
    
    
    
    
    /**
     * Create an association between a project and a consultant.
     * 
     * @param p Project
     * 
     * @param c Consultant
     * 
     * @throws ControlException if either parameter is null.
     */
    private void associate(Project p, Consultant c) throws ControlException
    {
        if (p == null)
        {
            throw new ControlException("Cannot associate null project.");
        }
        if (c == null)
        {
            throw new ControlException("Cannot associate null consultant.");
        }
        
        /**
         * Cases:
         * 
         *                                 __________________________________________________________________________________________
         *                                 |                              |                              | 
         *                                 |  p has no consultant         |   p has this consultant      | p has other consultant
         *                                 |                              |                              |  
         *   ______________________________|______________________________|______________________________|___________________________
         *                                 |                              |                              |
         *   c has this project            |  p.set(c)                    |   do nothing                 | p.set(c)
         *   ______________________________|______________________________|______________________________|___________________________
         *                                 |                              |                              |                            
         *   c does not have this project  |  p.set(c)  c.register(p)     |   c.register(p)              | p.set(c)   c.register(p)
         *   ______________________________|______________________________|______________________________|___________________________
         * 
         */
        
        // Always link the project first, THEN link the consultant.
        
        try
        {
            if(p.getConsultant() == null)
            {
                // p has no consultant
                
                if (c.hasProject(p))
                {
                    p.setConsultant(c);
                }
                else
                {
                    p.setConsultant(c);
                    
                    c.registerProject(p);
                }
            }
            else if (p.getConsultant().getId() == c.getId())
            {
                // p has this consultant
                
                if (c.hasProject(p))
                {
                    // do nothing
                }
                else
                {
                    c.registerProject(p);
                }
            }
            else if(p.getConsultant().getId() != c.getId())
            {
                // p has other consultant
                
                if (c.hasProject(p))
                {
                    p.setConsultant(c);
                }
                else
                {
                    p.setConsultant(c);
                    
                    c.registerProject(p);
                }
            }
        }
        catch(ControlException controlException)
        {
            // System.err.println("associate() ...controlException: " + controlException.getMessage());
            
            if (!controlException.getIsUnfinishedSelection())
            {
                controlException.printStackTrace();
            }
        }
    }
    
    
    
    
    
    
    
    
    /**
     * Remove an association between a project and a consultant.
     * 
     * @param p Project
     * 
     * @param c Consultant
     * 
     * @throws ControlException if either parameter is null.
     */
    private void disassociate(Project p, Consultant c) throws ControlException
    {
        
        if (p == null)
        {
            throw new ControlException("Cannot disassociate null project.");
        }
        if (c == null)
        {
            throw new ControlException("Cannot disassociate null consultant.");
        }
        
        /**
         * Cases:
         * 
         *                                 __________________________________________________________________________________________
         *                                 |                              |                              | 
         *                                 |  p has no consultant         |   p has this consultant      | p has other consultant
         *                                 |                              |                              |  
         *   ______________________________|______________________________|______________________________|___________________________
         *                                 |                              |                              |
         *   c has this project            |  c.deregister(p)             | p.set(null)  c.deregister(p) | c.deregister(p)
         *   ______________________________|______________________________|______________________________|___________________________
         *                                 |                              |                              |                            
         *   c does not have this project  |  do nothing                  |  p.set(null)                 | do nothing
         *   ______________________________|______________________________|______________________________|___________________________
         * 
         */
        
        // Always unlink the project first, THEN unlink the consultant.
        
        try
        {
            if (p.getConsultant() == null)
            {
                // p has no consultant
                
                if (c.hasProject(p))
                {
                    c.deregisterProject(p);
                }
                else
                {
                    // do nothing.
                }
            }
            else if (p.getConsultant().getId() == c.getId())
            {
                // p has this consultant
                
                if (c.hasProject(p))
                {
                    p.setConsultant(null);
                    
                    c.deregisterProject(p);
                }
                else
                {
                    p.setConsultant(null);
                }
            }
            else if (p.getConsultant().getId() != c.getId())
            {
                // p has other consultant
                
                if (c.hasProject(p))
                {
                    c.deregisterProject(p);
                }
                else
                {
                    // do nothing.
                }
            }
        }
        catch(ControlException controlException)
        {
            //System.err.println("associate() ...controlException: " + controlException.getMessage());
            
            if (!controlException.getIsUnfinishedSelection())
            {
                controlException.printStackTrace();
            }
        }
    }
    
    
    
    
    
    
    /**
     * Handles updates to the Project (short)Name JTextField component.
     */
    private class ProjectNameChangeHandler extends ProjectDocumentListener
    {
        /**
        * Override - provides our implementation.
        * 
        * Update the Project's Name whenever the user changes the text in the Project (short)Name JTextField.
        * 
        * @param docText - String value from the just-updated JTextArea or JTextField.
        */
        @Override
        protected void manipulate(String docText)
        {
            Project p = getMyProject();
            
            p.setProjectShortName(docText); // update the (short)Name for this Project.
            
            repaintGui();
            
            m_projectShortNameInput.requestFocusInWindow();
        }
    }
    
    
    
    
    /**
     * Handles updates to the Project Client Name JTextField component.
     */
    private class ClientNameChangeHandler extends ProjectDocumentListener
    {
        /**
        * Override - provides our implementation.
        * 
        * Update the Project's Client Name whenever the user changes the text in the Client Name JTextField.
        * 
        * @param docText - String value from the just-updated JTextArea or JTextField.
        */
        @Override
        protected void manipulate(String docText)
        {
            getMyProject().setClientName(docText); // update the Client Name for this project.
        }
    }
    
    
    
    
    /**
     * Handles updates to the Project CostCharged JTextField component.
     */
    private class ProjectCostChangeHandler extends ProjectDocumentListener
    {
        /**
        * Override - provides our implementation.
        * 
        * Update the Project's Cost-Charged, whenever the user changes the text in the Cost-Charged JTextField.
        * 
        * @param docText - String value from the just-updated JTextArea or JTextField.
        */
        @Override
        protected void manipulate(String docText)
        {
            int charge = 0; // dollars
            
            try
            {
                charge = Integer.parseInt(docText);
            }
            catch(NumberFormatException e)
            {
                // could not parse.
            }
            
            getMyProject().setCostCharged(charge); // update the Cost-Charged for this project.
        }
    }
    
    
    
    
    
    /**
     * Handles updates to the Project Description JTextArea component.
     */
    private class ProjectDescriptionUpdateHandler extends ProjectDocumentListener
    {
        /**
        * Override - provides our implementation.
        * 
        * Update the Project Description whenever the user changes the text in the Project Description JTextArea.
        * 
        * @param docText - String value from the just-updated JTextArea or JTextField.
        */
        @Override
        protected void manipulate(String docText)
        {
            getMyProject().setDescription(docText); // set Project Description.
        }
    }
    
    
    
    
    
    /**
     * Handles updates to the Consultant Name JTextField component.
     */
    private class ConsultantNameChangeHandler extends ConsultantDocumentListener
    {
        /**
        * Override - provides our implementation.
        * 
        * Update the Consultant's Name whenever the user changes the text in the Consultant Name JTextField.
        * 
        * @param docText - String value from the just-updated JTextArea or JTextField.
        */
        @Override
        protected void manipulate(String docText)
        {
            Consultant c = getMyConsultant();
            
            c.setName(docText); // update the Name for this consultant.
            
            repaintGui();
            
            m_consultantNameInput.requestFocusInWindow();
        }
    }
    
    
    
    
    
    
    
    /**
     * Handles updates to the Consultant (Address - Street Name) JTextField component.
     */
    private class StreetNameChangeHandler extends ConsultantDocumentListener
    {
        /**
        * Override - provides our implementation.
        * 
        * Update the Consultant's Address whenever the user changes the text in the Consultant Address JTextField.
        * 
        * @param docText - String value from the just-updated JTextArea or JTextField.
        */
        @Override
        protected void manipulate(String docText)
        {
            Consultant c = getMyConsultant();
            
            c.getAddress().setStreetName(docText); // update the Address for this consultant.
            
            repaintGui();
            
            m_streetNameInput.requestFocusInWindow();
        }
    }
    
    
    
    
    
    /**
     * Handles updates to the Consultant (Address - Street Number) JTextField component.
     */
    private class StreetNumberChangeHandler extends ConsultantDocumentListener
    {
        /**
        * Override - provides our implementation.
        * 
        * Update the Consultant's Address whenever the user changes the text in the Consultant Address JTextField.
        * 
        * @param docText - String value from the just-updated JTextArea or JTextField.
        */
        @Override
        protected void manipulate(String docText)
        {
            Consultant c = getMyConsultant();
            
            try
            {
                c.getAddress().setStreetNumber(Integer.parseInt(docText)); // update the Address for this consultant.
            }
            catch(NumberFormatException ex)
            {
                // invalid INTEGER.
            }
            repaintGui();
            
            m_streetNumberInput.requestFocusInWindow();
        }
    }
    
    
    
    
    
    /**
     * Handles updates to the Consultant (Address - Suburb) JTextField component.
     */
    private class SuburbChangeHandler extends ConsultantDocumentListener
    {
        /**
        * Override - provides our implementation.
        * 
        * Update the Consultant's Address whenever the user changes the text in the Consultant Address JTextField.
        * 
        * @param docText - String value from the just-updated JTextArea or JTextField.
        */
        @Override
        protected void manipulate(String docText)
        {
            Consultant c = getMyConsultant();
            
            c.getAddress().setSuburb(docText); // update the Address for this consultant.
            
            repaintGui();
            
            m_suburbInput.requestFocusInWindow();
        }
    }
    
    
    
    
    
    /**
     * Handles updates to the Consultant (Address - PostCode) JTextField component.
     */
    private class PostCodeChangeHandler extends ConsultantDocumentListener
    {
        /**
        * Override - provides our implementation.
        * 
        * Update the Consultant's Address whenever the user changes the text in the Consultant Address JTextField.
        * 
        * @param docText - String value from the just-updated JTextArea or JTextField.
        */
        @Override
        protected void manipulate(String docText)
        {
            Consultant c = getMyConsultant();
            
            try
            {
                c.getAddress().setPostCode(Integer.parseInt(docText)); // update the Address for this consultant.
            }
            catch(NumberFormatException ex)
            {
                // invalid INTEGER.
            }
            repaintGui();
            
            m_postCodeInput.requestFocusInWindow();
        }
    }
    
    
    
    
    /**
     * Handles updates to the annual salary input field.
     */
    private class SalaryDocListener extends FullTimeConsultantDocumentListener
    {

        @Override
        protected void manipulate(String docText)
        {
            int sal = 0;
            
            if (docText.length() > 0)
            {
                try
                {
                    sal = Integer.parseInt(docText);
                }
                catch(NumberFormatException nfe)
                {
                    sal = FullTimeConsultant.getDefaultAnnualSalary();
                }
            }
            else
            {
                sal = FullTimeConsultant.getDefaultAnnualSalary();
            }
            getMyConsultant().setAnnualSalary(sal);
                    
            repaintGui();
            
            m_AnnualSalaryInput.requestFocusInWindow();
        }
    }
    
    
    
    
    
    /**
     * Handles updates to the hourly rate input field.
     */
    private class HourlyRateDocListener extends PartTimeConsultantDocumentListener
    {
        @Override
        protected void manipulate(String docText)
        {
            int rate = 0;
            
            if (docText.length() > 0)
            {
                try
                {
                    rate =Integer.parseInt(docText);
                }
                catch(NumberFormatException nfe)
                {
                    rate = PartTimeConsultant.getDefaultHourlyRate();
                }
            }
            else
            {
                rate = PartTimeConsultant.getDefaultHourlyRate();
            }
            
            getMyConsultant().setHourlyRate(rate);
            
            repaintGui();
            
            m_HourlyRateInput.requestFocusInWindow();
        }
    }
    
    
    
    
    /**
     * Handles updates to the max-hours input field.
     */
    private class MaxHoursDocListener extends PartTimeConsultantDocumentListener
    {
        @Override
        protected void manipulate(String docText)
        {
            int hours = 0;
            
            if (docText.length() > 0)
            {
                try
                {
                    hours = Integer.parseInt(docText);
                }
                catch(NumberFormatException nfe)
                {
                    hours = PartTimeConsultant.getDefaultMaxHours();
                }
            }
            else
            {
                hours = PartTimeConsultant.getDefaultMaxHours();
            }
            
            getMyConsultant().setMaxHours(hours);
            
            repaintGui();
            
            m_MaxAllowedHoursInput.requestFocusInWindow();
        }
    }
    
    
    
    
    /**
     * Responds to events generated by the user selecting a consultant's gender.
     */
    private class GenderComboBoxHandler implements ActionListener
    {
        
        @Override
        public void actionPerformed(ActionEvent event)
        {
            String chosenGener = m_genderComboBox.getSelectedItem().toString();
            
            for (Employee.GenderType t : Employee.GenderType.values())
            {
                if (chosenGener.equals(t.name()))
                {
                    m_genderComboBox.getMyConsultant().setGender(t);
                }
            }
        }
    }
    
    
    
    
    
    
    
    
    /**
     * Fired when the Consultant-Type combo box appears on the Display Panel.
     * 
     * The combo box appears every time we paint the gui, so we have to remove
     * 
     * this listener when it is fired, otherwise we get a stack overflow from
     * 
     * calling repaintGui().
     * 
     * Remove self and attach the proper listener.
     */
    private class ConsTypeComboBoxLoaded implements ActionListener
    {
        @Override
        public void actionPerformed(ActionEvent event)
        {
            System.err.println("ConsTypeComboBoxLoaded.");
            
            m_consultantTypeComboBox.removeActionListener(this); // Prevent stack overflow when we call repaintGui().
            
            m_consultantTypeComboBox.addActionListener(new ConsTypeComboBoxHandler()); // Attach proper listener.
        }
    }
    
    
    
    
    
    
    /**
     * Responds to events generated by the user selecting the Consultant-Type (Consultant's contract)
     */
    private class ConsTypeComboBoxHandler implements ActionListener
    {
        @Override
        public void actionPerformed(ActionEvent event)
        {
            System.err.println("ConsTypeComboBoxHandler() " + event.paramString());
            
            Consultant c = m_consultantTypeComboBox.getMyConsultant();
            
            Consultant.ConsultantType chosenType = c.getMyType();
            
            for(Consultant.ConsultantType t : Consultant.ConsultantType.values())
            {
                if (m_consultantTypeComboBox.getSelectedItem().toString().equals(t.toString()))
                {
                    chosenType = t; // User has chosen Full-time or Part-time.
                }
            }
            
            
            int cid = c.getId();
            
            int annualSal = 80000;
            
            int hourlyRate = 100;
            
            int maxHours = 25;
            
            if(chosenType == Consultant.ConsultantType.FULL_TIME_CONSULTANT)
            {
                // Might already be a full-time consultant.
                try
                {
                    FullTimeConsultant ftc = (FullTimeConsultant)c;

                    return; // If successful cast, we don't need to do anything.
                    
                }
                catch(ClassCastException ex)
                {
                    // Not already a full-time consultant.
                    
                    // Construct a new Full-Time.
                    
                    FullTimeConsultant f = new FullTimeConsultant(c); // performs copy of project-list.
                    
                    f.setAnnualSalary(annualSal);
                    
                    c = f;
                    
                    m_model.setConsultantByID(cid, c);
                    
                    m_AnnualSalaryTitle.setVisible(true); // SHOW Annual Salary input (label)
                    
                    m_AnnualSalaryInput.setVisible(true); // SHOW Annual Salary input

                    m_HourlyRateTitle.setVisible(false);    // HIDE Hourly Rate input (label)
                    
                    m_HourlyRateInput.setVisible(false);    // HIDE Hourly Rate input

                    m_MaxAllowedHoursTitle.setVisible(false); // HIDE Max Hours input (label)
                    
                    m_MaxAllowedHoursInput.setVisible(false); // HIDE Max Hours input
                }
                
            }
            else if(chosenType == Consultant.ConsultantType.PART_TIME_CONSULTANT)
            {
                // Might already be a Part-Time Consultant.
                try
                {
                    PartTimeConsultant ptc = (PartTimeConsultant)c;

                    return; // If successful cast, we don't need to do anything.
                    
                }
                catch(ClassCastException ex)
                {
                    // Not already a part-time consultant.
                    
                    // Construct a new Part-Time.

                    PartTimeConsultant p = new PartTimeConsultant(c); // performs copy of project-list.
                    
                    p.setHourlyRate(hourlyRate);
                    
                    p.setMaxHours(maxHours);
                    
                    c = p;
                    
                    m_model.setConsultantByID(cid, c);
                    
                    m_AnnualSalaryTitle.setVisible(false); // HIDE Annual Salary input (label)
                    
                    m_AnnualSalaryInput.setVisible(false); // HIDE Annual Salary input

                    m_HourlyRateTitle.setVisible(true);      // SHOW Hourly Rate input (label)
                    
                    m_HourlyRateInput.setVisible(true);      // SHOW Hourly Rate input

                    m_MaxAllowedHoursTitle.setVisible(true);   // SHOW Max Hours input (label)
                    
                    m_MaxAllowedHoursInput.setVisible(true);   // SHOW Max Hours input
                }
            }
            
            m_consultantTypeComboBox.removeActionListener(this);

            repaintGui();
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * Handle the removal of a project from a client's responsibility.
     */
    private class DeassignProjectHandler implements ActionListener
    {

        @Override
        public void actionPerformed(ActionEvent event)
        {
            try
            {
                // CONSULTANT DETAILS -> ASSIGNED PROJECTS -> (some row) -> Remove button

                // The user wants to remove a project from the responsibility of the current consultant.

                
                String command = event.getActionCommand();
                
                System.err.println("DeassignProjectHandler: \"" + command.trim() + "\"");
                
                System.err.println("");
                
                
                
                RemoveProjectButton button = (RemoveProjectButton)event.getSource();
                
                Project projectToRemove = button.getProject();              // throws exception if project    is null.
                
                Consultant consultantToRemoveFrom = button.getConsultant(); // throws exception if consultant is null.
                
                if (projectToRemove != null)
                {
                    m_nameOfCurrentlySelectedListPanelItem = consultantToRemoveFrom.getName();
                    
                    disassociate(projectToRemove, consultantToRemoveFrom);
                    
                    repaintGui();
                }
            }
            catch(ControlException controlException)
            {
                System.err.println(controlException.getMessage());
            }
            catch(Exception e)
            {
                System.err.println(e.getMessage());
            }
        }
    }
    
    
    
    
    
    
    
    /**
     * Responds to events generated by the user selecting a consultant for the project.
     */
    private class ConsultantForThisProjectActionListener implements ActionListener
    {

        @Override
        public void actionPerformed(ActionEvent event)
        {
            
            JComboBox source = (JComboBox)event.getSource();

            String name = (String)source.getSelectedItem();

            //System.out.println("PROJ[" + m_currentlySelectedProject.getProjectShortName() + "] >>> Combox Box Select: " + name);

            
            // Unlink the project from its current consultant.
            
            Consultant consultantToDeregisterFrom = m_currentlySelectedProject.getConsultant();

            if (consultantToDeregisterFrom != null)
            {
                try
                {
                    disassociate(m_currentlySelectedProject, consultantToDeregisterFrom);
                }
                catch(ControlException ex)
                {
                    ex.printStackTrace();
                }
            }
            else
            {
                // project was already without consultant. Already unlinked.
            }
            
            // Have we selected a consultant in the combo box?
            
            if (!name.equals("(none)"))
            {
                // COMBO BOX ---> selected an ACTUAL consultant.
                
                try
                {
                    Consultant c = m_model.getConsultantByName(name); // get the chosen consultant from the model.
            
                    associate(m_currentlySelectedProject, c); // associate the project with the chosen consultant.
                }
                catch(ControlException ex)
                {
                    ex.printStackTrace();
                }
            }
            //showModelLinkage();
        }
    }
    
    
    
    
    
    
    
    
    /**
     * Handles ActionEvents from the File menu and Options menu.
     */
    private class MenuActionHandler implements ActionListener
    {
        
        
        /**
         * Handles ActionEvents
         * 
         * @param event ActionEvent object.
         */
        @Override
        public void actionPerformed(ActionEvent event)
        {
            
            String command = event.getActionCommand();

            if (command.equals("New"))
            {
                // FILE MENU -> NEW

                // Discard current document and clear the model

                System.err.println("Show showConfirmDialog");

                int confirm = JOptionPane.showConfirmDialog(

                    m_topLevelJFrame,

                    "Discard current document?",

                    "Discard current document?",

                    JOptionPane.YES_NO_OPTION
                );

                if (confirm == JOptionPane.NO_OPTION)
                {
                    System.err.println("Aborted by user.");

                    return;
                }
                System.err.println("Confirm Discard.");

                // Clear the model.

                System.err.println("m_model.clear()");

                m_model.clear();

                m_currentlySelectedProject = null;

                m_currentlySelectedConsultant = null;

                m_nameOfCurrentlySelectedListPanelItem = null;

                m_recentIndex_projectListPanel = -1;

                m_recentIndex_consultantListPanel = -1;

                repaintGui(); // model has been updated.



            }
            else  if (command.equals("Open (existing) Data File"))
            {
                // FILE MENU -> OPEN

                // Load the serialized model object from hard disk.

                System.err.println("(BEFORE) m_model.getProjectNames()" + m_model.getProjectNames());

                System.err.println("(BEFORE) m_model.getConsultantNames()" + m_model.getConsultantNames());

                try
                {
                    Model loadedModel = ModelLoader.loadModel(m_topLevelJFrame);

                    if (loadedModel == null)
                    {
                        System.err.println("Failed to load model.    loadedModel == null.");

                        // JOptionPane.showMessageDialog(m_topLevelJFrame, "Error - Failed to load data file.");

                        // quitApplication();

                        return;
                    }

                    System.err.println("Show showConfirmDialog");

                    int confirm = JOptionPane.showConfirmDialog(

                        m_topLevelJFrame,

                        "Discard current document?",

                        "Discard current document?",

                        JOptionPane.YES_NO_OPTION
                    );

                    if (confirm == JOptionPane.NO_OPTION)
                    {
                        System.err.println("Aborted by user.");

                        return;
                    }
                    System.err.println("Confirm Discard.");

                    m_model = loadedModel; // swap the model for the loaded one.

                    System.err.println("(AFTER) m_model.getProjectNames()" + m_model.getProjectNames());

                    System.err.println("(AFTER) m_model.getConsultantNames()" + m_model.getConsultantNames());

                    m_currentlySelectedConsultant = null;
                    
                    m_currentlySelectedProject = null;
                    
                    m_nameOfCurrentlySelectedListPanelItem = null;
                    
                    m_recentIndex_projectListPanel = -1;

                    m_recentIndex_consultantListPanel = -1;
                    
                    m_consultantTab.clearDetails(); // Clear details panel.
                    
                    m_projectTab.clearDetails();    // Clear details panel.
                    
                    m_tabbedPane.setSelectedIndex(0); // Show projects tab
                    
                    repaintGui(); // model has been updated.

                }
                catch(ControlException ex)
                {
                    if (ex.getMessage().equals("Cancelled"))
                    {
                        System.out.println("user clicked cancel, rather than opening a file. Do nothing.");
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(
                            
                            m_topLevelJFrame,

                            "A problem occurred while trying to open the file.",

                            ex.getMessage(),
                            
                            JOptionPane.PLAIN_MESSAGE
                        );
                        
                        // ex.printStackTrace(); // something went wrong when we tried to open the file.
                    }
                }



            }
            else  if (command.equals("Save (current) Data File"))
            {
                // FILE MENU -> SAVE

                ModelLoader.saveModel(m_topLevelJFrame, m_model);




            }
            else  if (command.equals("Exit application"))
            {
                // FILE MENU -> EXIT APPLICATION

                if (!m_model.modelIsEmpty())
                {
                    int confirm = JOptionPane.showConfirmDialog(

                        m_topLevelJFrame,

                        "Discard current document?",

                        "Discard current document?",

                        JOptionPane.YES_NO_OPTION
                    );

                    if (confirm == JOptionPane.NO_OPTION)
                    {
                        System.err.println("Aborted by user.");

                        return;
                    }
                }
                quitApplication(); // Exit application





            }
            else  if (command.equals("Editing Mode"))
            {
                // OPTIONS MENU -> EDITING MODE
                
                m_editable = true;
                
//                m_projectTab.setEditable(true);    // recursively goes through all subcomponents and sets their editable property.
//
//                m_consultantTab.setEditable(true); // recursively goes through all subcomponents and sets their editable property.

                repaintGui();
                
                m_projectTab.addRemButtonsEnable(m_editable);
                
                m_consultantTab.addRemButtonsEnable(m_editable);

                m_menuItemNewDataFile.setEnabled(m_editable);

                m_menuItemSaveDataFile.setEnabled(m_editable);
            }
            else  if (command.equals("Viewing Mode"))
            {
                // OPTION MENU -> VIEWING MODE

                m_editable = false;
                
//                m_projectTab.setEditable(false);    // recursively goes through all subcomponents and sets their editable property.
//
//                m_consultantTab.setEditable(false); // recursively goes through all subcomponents and sets their editable property.

                repaintGui();
                
                m_projectTab.addRemButtonsEnable(m_editable);
                
                m_consultantTab.addRemButtonsEnable(m_editable);

                m_menuItemNewDataFile.setEnabled(m_editable);

                m_menuItemSaveDataFile.setEnabled(m_editable);
            }
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * Handles ADD button events from the List Panel.
     */
    private class ListPanelHandlerAddButton implements ActionListener
    {
        
        
        /**
         * Handles ActionEvents from the GUI.
         * 
         * @param event ActionEvent object.
         */
        @Override
        public void actionPerformed(ActionEvent event)
        {
            if (!m_editable)
            {
                return; // Not in editing mode.
            }
            
            try
            {

                String command = event.getActionCommand();
                
                if (command.equals("Add"))
                {
                    // List Panel Add Button

                    System.err.println("LIST PANEL ADD BUTTON.");

                    int selectedTabIndex = m_tabbedPane.getSelectedIndex();

                    // Now decide which to to add... Project or Consultant ? 
                    
                    if(selectedTabIndex == 0)
                    {
                        // LIST PANEL -> ADD PROJECT

                        GregorianCalendar today = (GregorianCalendar)GregorianCalendar.getInstance(); // today, now.

                        Project p = new Project(

                            "proj",

                            "unnamedClient",

                            100,

                            today,

                            today,

                            null,

                            "no description",

                            null
                        );

                        p.setProjectShortName("proj" + p.getProjectID());

                        m_model.addProject(p);

                        repaintGui();

                    }
                    else
                    {
                        // LIST PANEL -> ADD CONSULTANT

                        Consultant c = new FullTimeConsultant(

                            "consultant",

                            new Address(),

                            Employee.GenderType.FEMALE,

                            Application.getDefaultConsultantPicture(),

                            80000
                        );

                        c.setName("consultant" + c.getId());
                        
                        m_model.addConsultant(c);

                        repaintGui();
                    }
                }
            }
            catch(ControlException ex)
            {
                if (!ex.getIsUnfinishedSelection())
                {
                    System.err.println("ControlException: " + ex.getMessage());

                    ex.printStackTrace();
                }
            }
        }
    }
    
    
    
    
    
    
    
    /**
     * Handles REMOVE button events from the List Panel.
     */
    private class ListPanelHandlerRemoveButton implements ActionListener
    {
        
        
        /**
         * Handles ActionEvents from the GUI.
         * 
         * @param event ActionEvent object.
         */
        @Override
        public void actionPerformed(ActionEvent event)
        {
            if (!m_editable)
            {
                return; // Not in editing mode.
            }
            
            try
            {
                String command = event.getActionCommand();
                
                if (command.equals("Remove"))
                {
                    // List Panel Remove Button

                    System.err.println("LIST PANEL REMOVE BUTTON.");

                    if (m_nameOfCurrentlySelectedListPanelItem == null)
                    {
                        // We cannot remove because nothing is selected.

                        return;
                    }

                    int selectedTabIndex = m_tabbedPane.getSelectedIndex();

                    // Now decide which to to remove... Project or Consultant ? 
                    
                    if(selectedTabIndex == 0)
                    {
                        // LIST PANEL -> REMOVE PROJECT
                        
                        System.err.println("Remove currently selected Project from model.");

                        if (m_currentlySelectedProject != null)
                        {
                            Consultant consultantToUnlink = m_currentlySelectedProject.getConsultant();

                            if (consultantToUnlink != null)
                            {
                                disassociate(m_currentlySelectedProject, consultantToUnlink);
                            }
                        
                            m_model.removeProject(m_currentlySelectedProject);
                        }
                        m_currentlySelectedProject = null; // just removed.
                        
                        System.err.println("Update Project Tab ListPanel contents.");

                        repaintGui();


                    }
                    else
                    {
                        // LIST PANEL -> REMOVE CONSULTANT
                        
                        System.err.println("Remove currently selected Consultant from model.");
                        
                        // Disassociate the projects of this consultant.
                        
                        if (m_currentlySelectedConsultant != null)
                        {
                            ArrayList<String> projectsToUnlink = m_currentlySelectedConsultant.getProjectNames();
                        
                            ListIterator<String> it = projectsToUnlink.listIterator();
                        
                            while(it.hasNext())
                            {
                                Project projectToUnlink = m_model.getProjectByName(it.next());

                                disassociate(projectToUnlink, m_currentlySelectedConsultant);
                            }
                        
                            m_model.removeConsultant(m_currentlySelectedConsultant);
                        }
                        m_currentlySelectedConsultant = null; // was just removed.

                        System.err.println("Update Consultant Tab ListPanel contents.");

                        repaintGui();
                        
                    }
                }
            }
            catch(ControlException ex)
            {
                if (!ex.getIsUnfinishedSelection())
                {
                    System.err.println("ControlException: " + ex.getMessage());

                    ex.printStackTrace();
                }
            }
        }
    }
    
    
    
    
    /**
     * Responds to events generated by the user clicking on the button for choosing a consultant image.
     */
    private class ImageSelectionHandler extends ConsultantActionListener
    {
        @Override
        public void actionPerformed(ActionEvent event)
        {
            // Launch file chooser.
            
            File file = new File(""); // get the current directory.

            String absCurrentDirPath = file.getAbsolutePath(); // get absolute path of the current directory.
            
            absCurrentDirPath = absCurrentDirPath + "\\owls";
            
            JFileChooser fileChooser = new JFileChooser(absCurrentDirPath);
            
            int returnVal = fileChooser.showOpenDialog(m_topLevelJFrame);
            
            if (returnVal == JFileChooser.APPROVE_OPTION)
            {
                File chosenFile = fileChooser.getSelectedFile(); // Get filename.
                
                String filePath = chosenFile.getPath();
                
                Consultant c = getMyConsultant();

                Picture pic = c.getPicture();

                pic.setFileName(filePath); // Save to consultant.

                repaintGui();
            }
        }
    }
    
    
    
    
    /**
     * Handles list-panel selection events.
     */
    private class ListPanelSelectionHandler implements ListSelectionListener
    {
        
        /**
         * Handles ListSelectionEvents from the GUI.
         * 
         * @param event ListSelectionEvent object.
         */
        @Override
        public void valueChanged(ListSelectionEvent event)
        {
            try
            {
                if (event.getValueIsAdjusting())
                {
                    // Multiple events reach this point.

                    // I don't want to respond to them all.
                    
                    ControlException ex = new ControlException();
                    
                    ex.setIsUnfinishedSelection(true);
                    
                    throw ex;
                }
                
                String sourceName = ((Component)(event.getSource())).getName();
                
                
                
                if (sourceName.equals(m_projectListPanelId))
                {
                    // LIST PANEL -> USER HAS SELECTED A PROJECT
                    
                    JList eventSource = (JList)(event.getSource());
                    
                    m_recentIndex_projectListPanel = eventSource.getSelectedIndex(); // returns -1 if there is no selection.
                    
                    String listPanelString = eventSource.getSelectedValue().toString(); //((JList)(event.getSource())).getSelectedValue().toString();
                    
                    System.out.println("PROJECT LIST PANEL SELECT -> " + listPanelString);
                    
                    m_nameOfCurrentlySelectedListPanelItem = listPanelString;
                    
                    m_currentlySelectedProject = m_model.getProjectByName(m_nameOfCurrentlySelectedListPanelItem);
                    
                    m_projectTab.setDetailsNVP(generateProjectDetailNVP(m_currentlySelectedProject)); // must be able to accept null
                    
                    
                    
                }
                else if (sourceName.equals(m_consultantListPanelId))
                {
                    // LIST PANEL -> USER HAS SELECTED A CONSULTANT
                    
                    JList eventSource = (JList)(event.getSource());
                    
                    m_recentIndex_consultantListPanel = eventSource.getSelectedIndex(); // returns -1 if there is no selection.
                    
                    String listPanelString = eventSource.getSelectedValue().toString();
                    
                    System.out.println("CONSULTANT LIST PANEL SELECT -> " + listPanelString);
                    
                    m_nameOfCurrentlySelectedListPanelItem = listPanelString;
                    
                    m_currentlySelectedConsultant = m_model.getConsultantByName(m_nameOfCurrentlySelectedListPanelItem);
                    
                    m_consultantTab.setDetailsNVP(generateConsultantDetailNVP(m_currentlySelectedConsultant)); // must be able to accept null.
                    
                
                }
            }
            catch(ControlException controlException)
            {
                
                // Ignore trivial message
                
                if (!controlException.getIsUnfinishedSelection())
                {
                    System.err.println("ControlException: " + controlException.getMessage());
                }
            }
            catch(Exception exception)
            {
                System.err.println("exception.getMessage(): " + exception.getMessage());
                
                if (exception.getMessage() == null)
                {
                    exception.printStackTrace();
                }
            }
        }
    }
    
    
    
    
    /**
     * Handles change-of-tab event.
     */
    private class TabChangeListener implements ChangeListener
    {
        
        /**
         * Handles change of current tab.
         * 
         * @param e ChangeEvent
         */
        @Override
        public void stateChanged(ChangeEvent e)
        {
            // System.err.println("stateChanged " + e.getSource().getClass().getName());
            
            if (e.getSource().getClass().getName().equals("javax.swing.JTabbedPane"))
            {
                if(m_tabbedPane.getSelectedIndex() == 0)
                {
                    System.err.println("Project tab selected");
                    
                    repaintGui();
                }
                else
                {
                    System.err.println("Consultant tab selected");
                    
                    repaintGui();
                }
            }
        }
    }
    
    
    
    /**
     * Handles window-close events.
     */
    private class WindowCloseListener extends WindowAdapter
    {
        /**
         * Handles the closing of the GUI Window.
         * 
         * @param e WindowEvent object.
         */
        public void WindowClosing(WindowEvent e)
        {
            // Terminate the currently running JVM.
            
            quitApplication();
        }
    }
}
